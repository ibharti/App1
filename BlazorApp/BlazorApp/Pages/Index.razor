@page "/"
@using BlazorApp.Pages.Components

<DeleteConfirmation></DeleteConfirmation>

@foreach (var contact in contacts)
{
    <ContactComponent FirstName="@contact.FirstName" LastName="@contact.LastName" Email="@contact.Email"></ContactComponent>
}


@code{

    [Inject]
    IContactService contactService { get; set; }

    private List<Contact> contacts;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        contacts = contactService.GetContacts();

        // contacts = new List<Contact>
        // {
        //     new Contact
        //     {
        //         FirstName = "Max",
        //         LastName = "Wic",
        //         Email = "maxwic@gmail.com"
        //     },
        //     new Contact
        //     {
        //         FirstName = "Jon",
        //         LastName = "K",
        //         Email = "jk@gmail.com"
        //     },
        //     new Contact
        //     {
        //         FirstName = "Illo",
        //         LastName = "Jai",
        //         Email = "Illo@gmail.com"
        //     },
        // };
    }
}



@*
Part 1
<PageTitle>HomePage</PageTitle>

This is the <b>Homepage</b>
<h3>Welcome to your app @userName</h3>


<h3>TOTAL : @GetSum()</h3>

explicitly : @(2 + 2) <!-- cannot be 2+2 , 2+2 needs to be in paranthesis-->

<!--adding button different methods-->
<button @onclick="ChangeName">Change name </button><br/>

<button @onclick="@(() => { userName = "BB"; })">Another way to change the name</button>


@if (1>2)
{
    <p>true</p>
}
else
{
    <p>false</p>
}
 

@for(int i = 0; i < 10; i++)
{
    <p>Value of i : @i</p>
}

@foreach(var name in names)
 {
    <p>@((MarkupString)name)</p> 
    //if applied markup string you can update the component 
    //with HTML like list or something
}

@code{
    private string userName = "Max";

    private string GetUserName()
    {
        return userName + "Well";
    }

    private void ChangeName()
    {
        userName = "Peter";
    }
    //the implicit way of getting some
    private int GetSum(){

        return 2 + 2;
    }

    private List<string> names;

    //trying list and understanding the use case of foreach block
    protected override void OnInitialized(){
        base.OnInitialized();
        names = new List<string>
        {
            "<b>value 01</b>",
            "value 02",
            "value 03",
        };
    }
} *@